// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.3
// source: proto/abuse-store.proto

package __

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AbuseStore_Push_FullMethodName  = "/AbuseStore/Push"
	AbuseStore_Check_FullMethodName = "/AbuseStore/Check"
)

// AbuseStoreClient is the client API for AbuseStore service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AbuseStoreClient interface {
	// Pushes abuse to the store
	Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error)
	// Check abuse in the store for existence
	Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error)
}

type abuseStoreClient struct {
	cc grpc.ClientConnInterface
}

func NewAbuseStoreClient(cc grpc.ClientConnInterface) AbuseStoreClient {
	return &abuseStoreClient{cc}
}

func (c *abuseStoreClient) Push(ctx context.Context, in *PushRequest, opts ...grpc.CallOption) (*PushReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PushReply)
	err := c.cc.Invoke(ctx, AbuseStore_Push_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *abuseStoreClient) Check(ctx context.Context, in *CheckRequest, opts ...grpc.CallOption) (*CheckReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CheckReply)
	err := c.cc.Invoke(ctx, AbuseStore_Check_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AbuseStoreServer is the server API for AbuseStore service.
// All implementations must embed UnimplementedAbuseStoreServer
// for forward compatibility.
type AbuseStoreServer interface {
	// Pushes abuse to the store
	Push(context.Context, *PushRequest) (*PushReply, error)
	// Check abuse in the store for existence
	Check(context.Context, *CheckRequest) (*CheckReply, error)
	mustEmbedUnimplementedAbuseStoreServer()
}

// UnimplementedAbuseStoreServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAbuseStoreServer struct{}

func (UnimplementedAbuseStoreServer) Push(context.Context, *PushRequest) (*PushReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (UnimplementedAbuseStoreServer) Check(context.Context, *CheckRequest) (*CheckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Check not implemented")
}
func (UnimplementedAbuseStoreServer) mustEmbedUnimplementedAbuseStoreServer() {}
func (UnimplementedAbuseStoreServer) testEmbeddedByValue()                    {}

// UnsafeAbuseStoreServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AbuseStoreServer will
// result in compilation errors.
type UnsafeAbuseStoreServer interface {
	mustEmbedUnimplementedAbuseStoreServer()
}

func RegisterAbuseStoreServer(s grpc.ServiceRegistrar, srv AbuseStoreServer) {
	// If the following call pancis, it indicates UnimplementedAbuseStoreServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AbuseStore_ServiceDesc, srv)
}

func _AbuseStore_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbuseStoreServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbuseStore_Push_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbuseStoreServer).Push(ctx, req.(*PushRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AbuseStore_Check_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AbuseStoreServer).Check(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: AbuseStore_Check_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AbuseStoreServer).Check(ctx, req.(*CheckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// AbuseStore_ServiceDesc is the grpc.ServiceDesc for AbuseStore service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AbuseStore_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "AbuseStore",
	HandlerType: (*AbuseStoreServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _AbuseStore_Push_Handler,
		},
		{
			MethodName: "Check",
			Handler:    _AbuseStore_Check_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/abuse-store.proto",
}
